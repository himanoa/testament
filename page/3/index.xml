<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>遺言書</title>
    <link>https://blog.himanoa.net/</link>
    <description>Recent content on 遺言書</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
        <atom:link href="https://blog.himanoa.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>日記</title>
      <link>https://blog.himanoa.net/82/</link>
      <pubDate>Sat, 22 Oct 2022 19:58:06 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/82/</guid>
      <description>今日は朝まで会社で飲んでいた。会社のベッドが壊れていたので、始発で家に帰りそのまま寝ていて17時くらいに起きた。
総じてなんもしていない。飯を作ろうとおもったが面倒なので海鮮丼をデリバリーしてもらって食べた。
自作Zshプラグイン・CLIツールの使用状況報告 - 茅の下 を読んだ。
ここの筆者は友人で、数々の自作ツールを作って自分で作業環境を整えている同士だ。
この記事はそんな数々の自作ツールをどういうモチベーションがあって作ったのか、や実際使ってみてどうだったのかというのがまとまっている。
僕も自作したツールを日常生活でかなりの頻度で使っており、その利用状況をまとめてもいいかなとおもった。が、しかし最近はリポジトリすら作らず、$PATHを通した ~/bin に書いてそのまま、みたいなツールも多くそれらを整理してpublicにしていく方が先なのでは？と考えている。
今日はゲームをしないで、のんびり過ごすかゲームをするかコードを書くかの三択で迷っている。こういうやることで迷っている時間が一番無駄なのでなるべくなくしていきたいのだが、行動ポリシーみたいなのが自分の中で定まっていないので減らすことができていない。
ダイエットはかなり進捗がよい。停滞期を完全に脱したっぽい。今週には78kg台にさしかかれそうだ。</description>
    </item><item>
      <title>日記</title>
      <link>https://blog.himanoa.net/81/</link>
      <pubDate>Thu, 20 Oct 2022 00:19:29 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/81/</guid>
      <description>先日Amazonでゴミ箱ホルダーみたいなのを購入したのが届いた。以前まではAmazonのダンボールのゴミ箱を使っていたが、ゴミ袋が取りやすくなったりゴミ袋を付けたりしやすくなっていい感じ。
その他たまってたダンボールを片付けたりしていた。切らしていた雑巾なども補充したので生活をぼちぼちやっていきたい。
今日は久々に昼にマクドナルドを食べた。自分の料理ばっかり食べていると飯に飽きてくる節があるなあと感じたので、月1くらいで出前を頼んで家で食べたいなとおもった。
最近季節の変わり目だからか朝起きるのがかなりきつい。業務に支障が出てきているので、pavrokをまた購入してもいいかもなあと考えている。
明日は家の契約の更新処理と様々な支払いのために外出したいなと考えている</description>
    </item><item>
      <title>日記</title>
      <link>https://blog.himanoa.net/80/</link>
      <pubDate>Tue, 18 Oct 2022 03:02:25 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/80/</guid>
      <description>夜に東京で予定があったので、オフィスに出社して仕事していた。
深夜にやったツイートがなんかすごい伸びてたのでミュートにした。基本的にTweetがたくさんfavられることとかないので、初めてミュートにする機能を使った。
仕事は自作したデータ構造をReactコンポーネントのレンダリングサイクルと接続するためのAPIを書いたり、説明用のドキュメントを書いていたりしていた。
自作したMutableなオブジェクトの変更に対してReactコンポーネントを接続する時に次のようなコードをよく書く。
import {useState, useEffect} from &amp;#39;react&amp;#39; interface Collection&amp;lt;T&amp;gt; = { updateSnapshot(value: T): void getSnapshot(): T subscribe(callback: () =&amp;gt; void): () =&amp;gt; void } const useCollection = &amp;lt;T&amp;gt;(observableCollection: Collection&amp;lt;T&amp;gt;): T = (observableCollection) =&amp;gt; { const [state, updateState] = observableCollection.getSnapshot() useEffect(() =&amp;gt; { return observableCollection.subscribe(() =&amp;gt; { updateState(observableCollection.getSnapshot()) }) }, [observableCollection]) return state } ReactコンポーネントはupdateStateが呼び出される度にuseStateが書かれているコンポーネントを再レンダリングするという特徴を利用して、自前で定義したMutableなCollectionに変更がある度に、useCollectionを呼び出したコンポーネントが再レンダリングさせる。ということを実現している。
これにselectorやmemo化を加えた概念がReact17までのStoreライブラリとReactを繋ぐhooksの実装としてメジャーだったのだが、React18から追加されるConcurrentModeと併用した時に、画面が一瞬だけ前の状態を表示してしまうなどのチラつきが発生してしまう問題を抱えている。
See. https://youtu.be/oPfSC5bQPR8?t=245
この問題を解決するためにReact18から useSyncExternalStore というカスタムフックが提供されていてこれにstoreのメソッドを食わせることでこの問題を解決できる。
職場のコードはReact17を使っているので useSyncExternalStore を使わなくても問題ないし、ReactからこのAPIがexportされていないので使えないが、将来的にReact18に移行する際に実装を変更することなく移行できるようにしたい。
そんな人向けのライブラリとして、 https://www.npmjs.com/package/use-sync-external-store が存在する。
これは古いReactバージョンで useSyncExternalStore を使うためのshimsで、React18が動いている場合は自動でそちらにfallbackしてくれる便利ライブラリだ。</description>
    </item><item>
      <title>近況</title>
      <link>https://blog.himanoa.net/79/</link>
      <pubDate>Mon, 17 Oct 2022 04:21:04 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/79/</guid>
      <description>ブログを書くのが習慣になっていないと近況記事みたいなのでまとめていろいろ書きがち
例によってまとめて書く。
労働 やっていた、が今回のクォーターは成果が芳しくなかった。
なんか単順に仕事する元気があんまりなかった。とはいえ仕事をしなければいけないのでやることはやっていたのだが、やることしかやってなかった感じだ。
最近はすっかり調子も回復してきており、自分が提案した仕様をアプリケーションに入れるためにあーでもないこーでもないみたいなコミュニケーションを頻繁にやったり、サンプル実装を書いてちゃんと動くか検証したりなどをやっている。
検証は順調であり、プロダクションリリースしたらちゃんとブログとして設計する上で考えたことを記述したいなとおもえるほどの自信作なので、これを読んでいる人間がまだいるのであれば楽しみにしていてくれ。:smile:
調子はよくなってきているが、なんか自分があまりやりたくないことに対する気合みたいなのがまだ回復してない気がするので、この辺りの熱意も回復するといいなーとおもいつつがんばる。
ちなみに仕事で元気がなかったのは、大規模な作り直しを終えてしまったから。燃え尽き症候群である
趣味 ゲームしていたり、TypeScriptで パーサーコンビネーター を書いていたりした。
こいつも完全なPrivateなプロジェクトで既に使っていて、使いながら機能を拡張していってる。型で困っていたところこりーさんに助けてもらったりして、だいぶ使いやすい感じのInterfaceになってきてよい。
このプロジェクトを作る上でランタイムとしてdenoをはじめて使ってみた。
denoモジュールからparser-combinatorを呼び出す時は、GitHubのReleasesからrawなmod.tsをimportして使えるのでパッケージマネージャーがなくてもライブラリを動かせて大変便利だなあっておもった。
また、dnt を使ってnpm向けのartifactを出力してpublishすることでNode.jsのスタックでも使うことができる点もよい。
dntを使ってビルドするのはNode.js + TypeScript でnpm packageを作るのに比べてかなり楽だ。denoを使うことで何もしなくてもTypeScriptの型チェック環境やテスト環境が提供されるし、rollupを使ってバンドルする時もd.tsを出力するために設定を自炊する必要がない。
また、Denoのstdに入っている assertEquals は jestと違い 型定義が &amp;lt;T&amp;gt;(actual: T, expected: T, msg?: string) ⇒ void なのもよくて、この型定義だとactualで入力した値のexpectedを手書きする時に補完が効くので,全てがanyになるjestの toStrictEquals などに比べてテストを書く時の体験がよい。
今後はTypeScript用のライブラリを自炊する必要がある場合はdeno + dntを使っていこうとおもった。
ErgoDash EZ 8月の末に長く使っていた自作キーボードが壊れてしまって、直そうとしたのだがスプリングピンヘッダが存在しなくて、なくなく購入した。
届いてみるとキー配列は一瞬で手に馴染むし親指周りで使えるキーは増えるしでいい買い物だった。
ダイエット 油断したら87kgまで増えてたので再開した。今回は白米は完全にカットせず量を少量にして、野菜や肉はちゃんと食べる感じでやっている。
糖質制限ダイエットをやるとまじで昼間仕事にならないほど脳味噌が死んでしまうので、ちゃんと仕事になるくらいまでの糖質は取るようにした。
とはいえこれだけだと絶対に痩せないので週3くらいで腹筋をやっている。
2ヶ月で87kgから80kgまで体重が落ちたのでこのままやっていきたい。とはいえ最近79.9kgから全然体重が下がらないのだが…
最近の悩みは毎週金曜出社して外食したり酒を飲んだりしているのだが、一週間のダイエット成果がこれで撃ち消されてる感じがする点だ。出社をやめれば解決するのだが、このイベント自体は結構好きなのでなるべくそういうことはしたくない………
自炊 一時期ダレてやっていなかったが、やっている。最近は料理を作ることが日常になってしまい、一々写真とったりしなくなってしまった。
最近では豚の冷しゃぶサラダやポトフなど、ヘルシーなメニューがメインに作ってたべている。
昨日は豚肉を食べる気合がなかったので、蒸し鶏をキャベツと人参と一緒にフライパンで蒸して作った。優しい味がしてよかった</description>
    </item><item>
      <title>TypeScriptで集合に対する操作を実装する</title>
      <link>https://blog.himanoa.net/78/</link>
      <pubDate>Mon, 26 Sep 2022 20:06:08 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/78/</guid>
      <description>type RegisteredUser = { kind: &amp;#39;registered&amp;#39;, id: string, name: string, } type TentativeUser = { kind: &amp;#39;tentative&amp;#39; id: string, name: string, } type User = TentativeUser | RegisteredUser みたいな構造が存在した時に User[] に対する振舞いを定義したい！みたいなモチベーションが発生することがある。
例を上げると、登録済みのユーザーのみでfilterしたい！みたいな感じだ。
フロントエンドのコードを書いたり見たりしたりすると、やりがちなのは User[] で引き回してコンポーネント側で次のようなコードで実装するやつだ。
import { FC, useMemo } from &amp;#39;react&amp;#39; const UserCard: FC&amp;lt;{ users: User[] }&amp;gt; = ({users}) =&amp;gt; { const registeredUsers = useMemo(() =&amp;gt; { return user.filter((u): u is TentativeUser =&amp;gt; u.kind === &amp;#39;registered&amp;#39;) }, []) return &amp;lt;&amp;gt;.</description>
    </item>
  </channel>
</rss>