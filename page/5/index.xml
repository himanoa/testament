<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>遺言書</title>
    <link>https://blog.himanoa.net/</link>
    <description>Recent content on 遺言書</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
        <atom:link href="https://blog.himanoa.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>TypeScript備忘録(関数の実行時に推論を確定させるテク)</title>
      <link>https://blog.himanoa.net/70/</link>
      <pubDate>Mon, 02 Aug 2021 17:23:58 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/70/</guid>
      <description>type UseSelectorBuilder&amp;lt;T, S&amp;gt; = () =&amp;gt; (selector: (state: T) =&amp;gt; S) =&amp;gt; S みたいな型が存在した時にSelectorBuilderではTまでの型を確定してSはbuilderの戻り値を呼び出した時に型を確定させたい場合どう書けばいいか
答えはこう
type UseSelectorBuilder&amp;lt;T, S&amp;gt; = () =&amp;gt; &amp;lt;S&amp;gt;(selectlor: (state: T) =&amp;gt; S) =&amp;gt; S よかったですね</description>
    </item><item>
      <title>HugoでもがんばればGatsbyみたいなことできるんでは？</title>
      <link>https://blog.himanoa.net/69/</link>
      <pubDate>Fri, 02 Jul 2021 01:54:31 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/69/</guid>
      <description>今日は読みにくい文章を書くことによって人類の脳味噌を破壊しまーーーすw
blog.ojisan.io とか random.taguch.dev みたいなgatsbyのSSRやNextJSのSSRでできたサイトは一覧ページの回覧が早くていいですよね。羨しいです。僕も亜音速の世界で生きたい(!?!?!?)
しかし絶対にサーバーは持ちたくないので、最初のレンダリングはビルドしたHTMLが降ってきて、そこからJSでReactがマウントされてSPAになってページ遷移が最高の速度を人類に提供するサンタクロース(!?)になりたいです。
ここでよく考えてみると、実はSSGしてmetaタグとかを作るのは記事の個別のページでよく、一覧ページにそういうメタ情報を付ける必要はあんまりないことに気づいちゃいました。
つまり次の二つのフローをうまく動かすことができるSPAアプリケーションを作れば、hugoのまま最高の記事一覧ページ体験をプレゼントすることができるわけですね
フロー1 最初に個別ページにアクセスがくる編 回覧者がサイトに blog.himanoa.net にアクセスする
GitHub Pagesが https://github.com/himanoa/testament/blob/gh-pages/68/index.html 返してブラウザに表示させる
回覧者がサイト内導線を踏んで一覧ページにアクセスする
GitHub Pagesが唐突に一覧ページの顔をしたSPAを返す
回覧者がSPA上で記事のリンクをクリックする
prefetchされたJSONをSPAが返して記事ページを表示する！！！！
卍 閃光の世界へようこそ 卍
フロー2 最初に記事一覧ページにくる場合 GitHub Pagesが唐突に一覧ページの顔をしたSPAを返す
回覧者がSPA上で記事のリンクをクリックする
prefetchされたJSONをSPAが返して記事ページを表示する！！！！
卍 閃光の世界へようこそ 卍
これはhugoのtheme機能をつかえばちょっとしたあとはちょっとした設定で実現できそうなのでそのうちやりたいですね。俺のブログ回覧者も閃光の世界に誘いたいぜ～～～～～～～～～～～～～</description>
    </item><item>
      <title>日記 2021-06-15</title>
      <link>https://blog.himanoa.net/68/</link>
      <pubDate>Wed, 16 Jun 2021 00:12:51 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/68/</guid>
      <description>ダイエット 昨日日記を書いた後散歩して、友達と通話をしながら朝を迎えた
今日は筋肉痛がひどすぎるのと徹夜なので寝る
ちゃんとしたPR ちゃんとしたPRってなんだろう。テンプレートだけではまともなPRっていうのはわからないので、OSSのPR一日一個を読むみたいなのをやってみたら言語化できるんじゃないか？という仮説をたてた
明日からやっていきたいがそこまでの余力があるのか果たして…
労働 無限に一つのコンポーネントのバグを取っていた。とりあえず手を入れてたコンポーネント自体はできたので繋ぎ込んで終わり
React How to support strict effects · Discussion #18 · reactwg/react-18
Automatic batching for fewer renders in React 18 · Discussion #21 · reactwg/react-18
New feature: startTransition · Discussion #41 · reactwg/react-18
あたりをさらっと読んだ。
startTransition に関しては業務で使ったら若干便利そうなところをあるので導入したさがある。
ただ Concurrent modeをoptinするのかどうかの議論は必要そうだなーって感じ
useEffect の周りの話は最初見た時は使ってる箇所とマイグレーション方法的を考えた時に手間がやばいな…っておもったが、
import { useEffect, useRef } from &amp;#39;react&amp;#39; type OnUnmounted = () =&amp;gt; void | void type UseWillBeMounted = (effect: () =&amp;gt; OnUnmounted) =&amp;gt; void export const useWillBeMounted: UseWillBeMounted = (effect) =&amp;gt; { const effectRef = useRef&amp;lt;boolean&amp;gt;(false) useEffect(() =&amp;gt; { if(effectRef.</description>
    </item><item>
      <title>日記 2021-06-14</title>
      <link>https://blog.himanoa.net/67/</link>
      <pubDate>Tue, 15 Jun 2021 00:58:38 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/67/</guid>
      <description>ダイエット なんか気づいたら太ってたのでダイエットしようとおもう。食生活も直したいけどそれどころではないので一旦運動からやろうかなと
この日記を書き終わったら、散歩してくる予定
他人の書いたコード 他人の書いたコードを読むことはできるが、他人の書いたコードに自分の書いたコードを足すのがとてもダルいとおもっていることがわかってきた。
予防線を貼るが特定個人のコードがだるいとかいう話ではなく、自分の性格的な話です
で、これを拗せると他人の書いたコードに最小の変更で、機能を追加するということができず、結局全部書き直すのとおなじくらいのdiff量になってしまう という問題に直面する。
「ダーティなコードを書く選択も取らずに甘えたこと言ってるんじゃねえ」って言われたらそれはそう…って感じになるので、ある程度こういう手が取れるようになりたいよなあって思った
ダーティなコードを書きたくない理由はあって、基本的にダーティなコードを書いて何か問題が発生して困るのは自分 なので 問題が発生した時に切り分けと修正がしやすいような構成で自分のコミットをデプロイしたい。すなわち、要件に対して自分が適切だと思えるコードに書き直したい というのが理由。
正直チーム開発に向いてないなあって最近思った
はやく石になりたい
あと外部ライブラリ、大体仕事の邪魔
会社 チームでコード書くのだるいな…とかいう話をした後にこれを書くのも信憑性を疑われそうなのですが、会社については神だとおもってます。
単順に会社の人達おもしろいし仕事が正確で、仕事してて大変快適で最高です。
次回の出社日とか楽しみ
今日みた配信 ピアノの音楽に綺麗な歌声が重なると泣きそうになる。多分疲れてるんだなあ
TypeScript UnionType とか割と都合がいい機能が揃ってて仕事で使うにはかなり便利なんですが、例外はどんなにがんばろうとanyゲーミングになって安全もクソもないので使用を強要された時以外使いたくないなあとおもいはじめた。
Reactつかえて例外周りがまともなプログラミング言語っていうのも思い付かないしどうしようかなあってなってる。ReasonMLとかどうなんだろう
WSL2 土曜にぶっ壊して sudo の user password すら通らなくなったので、コードとconfigのバックアップだけとって、ArchWSLの再インストールをした
.config/ を展開 direnv と asdf と neovim とRustのtoolchain入れたら開発できるくらいには回復したので、環境構築楽でいいなあとおもった
asciidoctor 生成されるhtmlに不満があるので、はやく自作してるAsciidoc parserベースにして作り直したい。FF14の固定活動とかもあって全然作業できなくて自分が二人ほしいですね</description>
    </item><item>
      <title>ブログのURL構造を変更した</title>
      <link>https://blog.himanoa.net/65/</link>
      <pubDate>Sat, 06 Feb 2021 09:12:08 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/65/</guid>
      <description>hugoのversionを上げたら blog.himanoa.net が entries/って記事を表示しはじめて壊れてしまっていたので、content配下のディレクトリ構造を変更した。
しかし、content以下のディレクトリ構造を変えるとビルドした後の記事のURLも変わってしまう。
URLが変わってしまうと、過去のリンクが壊れてしまってつらいつらいなので、過去のURLを踏んできたときは今のURLにリダイレクトするようにした。
ここではその作業ログを残す
Hugoでのリダイレクトの貼り方 hugoにはFront Matterという仕組みが存在し、ここに決められた形式のメタデータを書くことができる。
ここにリダイレクト元となるパスを記述することでリダイレクトを実現することができる。
詳細は公式ドキュメントを参照するべし
作業手順 content/entries以下のファイルをcontent/に移動 15a468c
既存の記事内のFront Matterの形式を揃える
hugo convert toJSON --unsafe を実行することでcontent配下のFront matterを一括変換できる cf5bfc5
記事ファイルの内部を開いてFront Matter部分だけ抜き出して置換するJavaScriptを書いて実行する c5a942b
コードはこちら
git push してデプロイされたら動作確認する</description>
    </item>
  </channel>
</rss>