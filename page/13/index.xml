<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>遺言書</title>
    <link>https://blog.himanoa.net/</link>
    <description>Recent content on 遺言書</description>
    <generator>Hugo -- gohugo.io</generator>
    
        <atom:link href="https://blog.himanoa.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>xrandrコマンドで解像度を弄る</title>
      <link>https://blog.himanoa.net/23/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/23/</guid>
      <description>ThinkPad X1Carbonを購入してから早4カ月経過しました。
スペック的には不満がないんですが、解像度がおおきすぎて文字が小さくてつらいという問題があったので解像度を下げたくなったのでやった。
XWindowManagerでやっているので以下のコマンドで解像度を設定できる
&amp;gt;&amp;gt;&amp;gt; xrandr --output eDP-1 --mode 1920x1080 以上</description>
    </item><item>
      <title>Nの末路</title>
      <link>https://blog.himanoa.net/22/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/22/</guid>
      <description>微妙に拗せて終わってしまった心に染みるアニメ ゆるキャン△</description>
    </item><item>
      <title>私的TypeScriptいろいろまとめ</title>
      <link>https://blog.himanoa.net/21/</link>
      <pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/21/</guid>
      <description>flowがすぐ壊れて何も信用できなくなってつらかったのでTypeScript入門することにした。
webpackでとりあえずproduction用とその他でsourcemapを出し分けできるようにしたのでいろいろメモする。
筋悪い箇所があったらTwitterかはてブのコメントで頼む
tsconfig.json {&amp;#34;compilerOptions&amp;#34;: {&amp;#34;target&amp;#34;: &amp;#34;es5&amp;#34;,&amp;#34;module&amp;#34;: &amp;#34;commonjs&amp;#34;,&amp;#34;moduleResolution&amp;#34;: &amp;#34;node&amp;#34;,&amp;#34;emitDecoratorMetadata&amp;#34;: true,&amp;#34;experimentalDecorators&amp;#34;: true,&amp;#34;declaration&amp;#34;: false,&amp;#34;noImplicitAny&amp;#34;: false,&amp;#34;noImplicitReturns&amp;#34;: false,&amp;#34;removeComments&amp;#34;: true,&amp;#34;strictNullChecks&amp;#34;: false,&amp;#34;outDir&amp;#34;: &amp;#34;build&amp;#34;,&amp;#34;lib&amp;#34;: [&amp;#34;es6&amp;#34;,&amp;#34;es7&amp;#34;,&amp;#34;dom&amp;#34;]},&amp;#34;exclude&amp;#34;: [&amp;#34;dist&amp;#34;,&amp;#34;build&amp;#34;,&amp;#34;node_modules&amp;#34;]} moduleをcommonjsにしてしまったけどwebpackでの最適化の都合を考えると esModuleInterop の方がいいかも
strictNullChecks は依存で壊れがちらしいのでオフにしている…オンにしたい…
webpack.config.js const path = require(&amp;#34;path&amp;#34;);const ENV = process.env.NODE_ENV || &amp;#34;development&amp;#34;;const DEV_PORT = process.env.PORT || 4444;const webpack = require(&amp;#34;webpack&amp;#34;);const CleanWebpackPlugin = require(&amp;#34;clean-webpack-plugin&amp;#34;);const HtmlWebpackPlugin = require(&amp;#34;html-webpack-plugin&amp;#34;);const ExtractTextPlugin = require(&amp;#34;extract-text-webpack-plugin&amp;#34;);module.</description>
    </item><item>
      <title>Windows Subsystem for Linuxで開発環境を整えた</title>
      <link>https://blog.himanoa.net/19/</link>
      <pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/19/</guid>
      <description>ndenv とか pyenv とか rbenv とか tmux とか fish とか neovim とか fzf とか色々動いたし、True Color出せるということもわかったので、まぁ常用はできるんじゃないですかね？といった所。常用するかどうかは知らん。まだ課題点もいろいろあるし。
導入 WSLチュートリアルがあるので これ通りやった。 https://github.com/QMonkey/wsl-tutorial
XWindowSystemが必要なアプリケーションを使う予定がないならXLaunch入れたりとかはしなくていいとは思う
あとは普通のUbuntuなので必要なアプリケーションをインストールしていくだけ。
僕の環境は多分大体以下のコマンドで再現できると思う
sudo apt-get install software-properties-commonsudo apt-add-repository ppa:fish-shell/release-2sudo add-apt-repository ppa:neovim-ppa/unstablesudo apt-get update &amp;amp;&amp;amp; sudo apt-get install neovim fish tmux go git build-essential openssl libssl-dev libbz2-dev libreadline-dev libsqlite-dev gcc python-buildgit clone https://github.com/sstephenson/rbenv.git ~/.rbenvgit clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-buildgit clone https://github.com/riywo/ndenv ~/.ndenvgit clone https://github.com/riywo/node-build.git ~/.ndenv/plugins/node-buildgit clone https://github.</description>
    </item><item>
      <title>WSLでクリップボードを共有する</title>
      <link>https://blog.himanoa.net/20/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/20/</guid>
      <description>Windows Subsystem for Linuxで開発環境を整えた の続きの記事です。まともに使ってみたところ、NeovimのyankがWindowsのクリップボードに入ってくれないのが結構ストレスになったのでそれの解消をします。
Windowsにはclip.exeというソフトウェアが搭載されており、これを使うことでWSLからWindowsのクリップボードに文字列を入れることができます
echo &amp;#34;:innocent:&amp;#34; | clip.exe# wsl Terminal上でShift + Insert:innocent: ただ、このソフトウェア単体だとクリップボードから文字列を取り出すことができないのと、文字列の最後に改行コードが入るらしく(余計なことしやがって)つらいので別のアプローチでやります
先にやっておくこと https://github.com/equalsraf/win32yank/releases から win32yank-x64.zipをダウンロードしてきて展開 展開して出てきたwin32yank.exeを WSL上でecho $PATHして列挙されたディレクトリのいずれかに配置 win32yankの使い方は clip.exe と大体同じで以下のように使う
echo &amp;#34;poepoe&amp;#34; | win32yank.exe -iwin32yank.exe -opoepoe 念のためWindows上で任意のテキストボックスでCtrl+vして貼り付けられるか確認しておくと良いかもしれない。
Neovimからwin32yank.exeを使う さてここまでできたのなら、Neovimから yでヤンク、pで貼り付けるみたいなことをできるようにしたい。
過去の記憶からNeovimでLinuxのクリップボードと連携した時に xsel に依存していた覚えがあった。
また、丁度手元にNeovimのソースコードがあったのでそこから検索して(最悪書き換えてビルドすればよい)どうすればいいかを模索した
cd ~/src/github.com/neovim/neovimgit grep xselruntime/autoload/provider/clipboard.vim:&amp;#34; When caching is enabled, store the jobid of the xclip/xsel process keepingruntime/autoload/provider/clipboard.vim: elseif exists(&amp;#39;$DISPLAY&amp;#39;) &amp;amp;&amp;amp; executable(&amp;#39;xsel&amp;#39;) &amp;amp;&amp;amp; s:cmd_ok(&amp;#39;xsel -o -b&amp;#39;)runtime/autoload/provider/clipboard.</description>
    </item>
  </channel>
</rss>