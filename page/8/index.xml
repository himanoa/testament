<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>遺言書</title>
    <link>https://blog.himanoa.net/</link>
    <description>Recent content on 遺言書</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
        <atom:link href="https://blog.himanoa.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ghqで管理されたディレクトリ構造でディレクトリを作ってgit initまでしてくれるツールを作った</title>
      <link>https://blog.himanoa.net/53/</link>
      <pubDate>Sat, 26 Oct 2019 20:09:49 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/53/</guid>
      <description>手元のマシンでリポジトリを管理するときにghqを使うと勝手に統一感あるディレクトリ構成でリポジトリ管理してくれるので便利です。
しかし、自分でリポジトリを作ってなにかを開始する機会が多いと mkdir ~/src/github.com/himanoa/foobarを毎回入力する必要がありちょっと不便です。
リポジトリ名を入力したらよしなにディレクトリを作って欲しいと思ってたので、勉強がてらにRustで簡単なCLIツールを作りました。 mkrepo
インストール方法 macOS用にhomebrew用の整備とかArchLinux向けにAURパッケージを公開しているわけではないので、インストールには cargo が必要です。
次のコマンドでインストールすることができます
cargo install mkrepo
また、mkrepoは.gitconfigに特定のkey-value構造が存在していることに依存しています。そのため ~/.gitconfigに次のような記述を追加する必要があります
[user] name=&amp;#34;あなたのなまえ&amp;#34; [ghq] root=&amp;#34;~/src&amp;#34; [mkrepo] service=&amp;#34;github.com&amp;#34; つかいかた Make project directory for ghq style. 0.0.1 USAGE: mkrepo [FLAGS] [OPTIONS] &amp;lt;repository&amp;gt; FLAGS: -d dru run -h, --help Prints help information -V, --version Prints version information OPTIONS: -a, --author &amp;lt;author&amp;gt; repository author name -m &amp;lt;first_commit_message&amp;gt; first_commit_message name -s, --service &amp;lt;service&amp;gt; service name ARGS: &amp;lt;repository&amp;gt; Repository name mkrepo foobar とかやると src/github.</description>
    </item><item>
      <title>物理の単位を落としてしまうと</title>
      <link>https://blog.himanoa.net/52/</link>
      <pubDate>Fri, 25 Oct 2019 21:55:37 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/52/</guid>
      <description>えー、物理の単位をー落としてしまうとー、将来、モニタのレストアームをつけうときにーあー、とても、つけるのがー困難にーなってしまう。
なので物理の単位を落とさないように皆さんちゃんと勉強しましょう
あと自分の机の規格を知らずに雑にアーム買うのもやめましょう</description>
    </item><item>
      <title>MHWで効率良くクラウンをコンプしたい</title>
      <link>https://blog.himanoa.net/51/</link>
      <pubDate>Wed, 11 Sep 2019 22:29:02 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/51/</guid>
      <description>モンスターハンターワールドで効率よく金冠をコンプしたい</description>
    </item><item>
      <title>gitをより便利にするsubcommand集を作った</title>
      <link>https://blog.himanoa.net/50/</link>
      <pubDate>Tue, 10 Sep 2019 02:19:08 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/50/</guid>
      <description>gitにはsubcommandという仕組みが存在していて、パスが通ったディレクトリに+xなgit-xxxファイルを置いておくと、git xxx で呼び出せる仕組みが存在します
具体例を上げると ~/bin/ にパスが通ってるとして、~/bin/git-wip が存在したなら 任意のgitディレクトリで git wip で ~/bin/git-wip が呼び出せます。
さもgitのpluginのような顔をしていますが、別にプラグインだから専用のAPIにアクセスできるみたいなことはありません。
個人的にはgitの操作で結構ワンライナーでかけるけど毎回書くのに気合が必要なやつをラップするコマンドをサブコマンドとして管理すると便利だったりします。
たとえばリポジトリ内でgrepした結果を置換する git grep -l Foo | xargs sed -i &#39;&#39; -e &amp;quot;/Foo/Bar/g&amp;quot; をサブコマンドとして実装するとかです。
やっと本題に戻りますが、これらのサブコマンド集を実装してリポジトリとして公開しました! himanoa/git-subcommands
インストール himanoa/git-subcommands は以下のツールに依存しています。
bash python 3.x推奨 git git clone https://github.com/himanoa/git-subcommands ~/git-subcommands PATHを ~/git-subcommands/src に通す zshとかbashを使っているなら export PATH=~/git-subcommands/src:$PATH とかでいいのでは？ インストールが完了したら以下のセクションのサブコマンドがそれぞれ動作できるようになるはずです！
実装したコマンド git-replace リポジトリ内の特定の文字列を置換する いつも git grep -l Foo | xargs sed -i &#39;&#39; -e &amp;quot;/Foo/Bar/&amp;quot; とか書いてた実装ですね。これをこのサブコマンドを用いることで以下のスニペットまで短縮できます
$ git strreplace Foo Bar ちなみに自慢していたところを@unecochanさんに --word-regexp オプションへの対応実装のPRをもらいました！ありがとうございました！</description>
    </item><item>
      <title>RSSリーダーとの付き合い方</title>
      <link>https://blog.himanoa.net/49/</link>
      <pubDate>Sat, 07 Sep 2019 02:19:36 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/49/</guid>
      <description>この記事はどうやって普段RSSリーダーを運用して情報を収集しているのかを言語化したものです
使っているRSSリーダー 今使っているのはFeedlyだが、 正直何でもいいと思う。ただ、以下の特徴を抑えてるリーダーがあると便利。
クラウド同期 どこまでフィードに既読をつけたかなどをデバイス間で自動同期してくれる フィードのグループ化 あとで見る feedlyには備え付けられているけどTwitterで流れてきて後で見たいリンクなども一元管理したいため、Pocketを使っている feedlyもベターではあるがベストではない感じがしていて、また自作したいなと考えている。とはいえ、巡回どうするかとか面倒見なくちゃいけない物が多くてなんとなく優先度低い
今まで使っていたツールの遍歴 Opera feedly Slack nadeshiko YQLが爆発して動かなくなった feedly 運用方法 以下のライフサイクルで運用している。閲覧できなかった物に関しては縁がなかったということで既読つけてる。
朝起きてfeedlyを見て気になる記事をPocketのあとで見るに突っ込んでおく 寝坊した時は出社して余裕がある時間に眺める 時間の許す限りやる。見れなかった情報に関してはスルーする 風呂入ってる時とか寝落ちするまでの間にスマートフォンでPocketに突っ込んだやつを読んでいく 今後やりたいこと: Pocketに突っ込んだ記事だけ選定してブログに自動でポストしてニュースフィードみたいにしたら便利かも 週の終わりに見れなかった情報を全部既読つける 今後やりたいこと: crontab回して自動で既読つけたい </description>
    </item>
  </channel>
</rss>