<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>遺言書</title>
    <link>https://blog.himanoa.net/</link>
    <description>Recent content on 遺言書</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
        <atom:link href="https://blog.himanoa.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Neovimの設定回りをlua化した</title>
      <link>https://blog.himanoa.net/84/</link>
      <pubDate>Tue, 01 Nov 2022 06:49:54 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/84/</guid>
      <description>昨日はまじで仕事する気がでなくて泣く泣く有給を取ったが、やることがなかったのでNeovimの設定をlua化してみた。
一日で終わるか不安だったが元々の設定がモジュールとして分離されていたため、部分的にlua化→動作確認というプロセスが踏みやすくて3時間くらいで終了した。
手順は次のサイトを参考にしながらやった。
[nvim-lua-guide-ja/README.ja.md at master · willelz/nvim-lua-guide-ja](https://github.com/willelz/nvim-lua-guide-ja/blob/master/README.ja.md)
こことNeovim本体のAPIDocumentationを見れば少なくともluaでどうやって書けばいいかはわかったので想像より簡単に作業ができた。
しかし、VimScriptじゃないとだめな部分というのはまだ存在するようで、Luaの中からVimScriptを呼び出して解決している部分もまだ多く残っている。
移行した感想は次の通り
Luaというのがシンプルな言語仕様かつ、関数をオブジェクトとして使えるプログラミング言語で僕好みで、うれしかった
Luaを書くのははじめてではなく、i3wmの設定かウィジェットを書くのに使ったことはあるが、しっかり書いたことはなかった
VimScriptではやりにくかった書き方がluaではサクッと出きて僕フレンドリーな設定ファイルができた
とはいえ標準APIにTableをcombineする実装やmapする実装がなくて（◞‸◟）だったので、自分でそういったFPライクな書き方ができるモジュールを作ったりはした(楽しかった)
設定ファイルという側面より実行されるコードという側面がめちゃくちゃ強くなったので、テスト書ける部分は書くようにしたい。
Luaのテストはどうやって書けばいいんだろうみたいなのを調べるのに頭が回らなくて今回はやってない
CIとかも回せるとNeovimに内蔵されたLuaのversion↑とかにも自信を持って追従できれ嬉しいかもね
普段書いてるRustやTypeScriptに比べてLintやFormatterなどの情報が弱い気がした。どうやってやればいいかわかってないので、大手のLuaプロジェクトを調査したほうがいいかも</description>
    </item><item>
      <title>日記</title>
      <link>https://blog.himanoa.net/83/</link>
      <pubDate>Tue, 25 Oct 2022 22:16:41 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/83/</guid>
      <description>今日は朝かなり早く起きたので、珍しく朝御飯を作った。
グリルで焼いた焼き魚と目玉焼き、あとは味噌汁と漬物と納豆御飯と海苔だ。
朝から大量にたべてしまったこともあって、昼飯も晩飯も特に食べなくても活動が維持できている。豪勢な朝御飯は体験がいいので明日も作っていきたいが、魚のストックを切らしてしまったので維持することができない。残念。
一人暮らしで焼き魚を食うのはコスパが悪い食事だとおもっていたのだが、1パックで4食くらい食べられることを考えると実はコスパがいいのでは？とおもった。特に塩さばは肉と違って賞味期限も長いのでしらすと同時にこれからも食べていきたい。
冬といえばブリが安くておいしい季節なので魚を楽しむという意味ではこれからの季節が楽しみである。
魚で思い出したのだが、最近はメガ盛りみたいな感じで安くてボリュームディスカウントが効いてるこま切れ肉を買うのをやめた。
というのも魚を食べるようになってから魚と肉、どっちも消費するのが厳しいので肉の量を減らしてグレードを上げたのだ。
肉は国産の豚しゃぶを買うようになったが正直冷しゃぶばっか作っていて、あまり違いはわかっていない。できれば肉の質で変わるような料理を作って試してみたいところだ。
今日は早朝からひどく冷えた朝で、常にホットな飲み物や味噌汁を飲みながら仕事をしていた。この時期からこの寒さだと冬になったらどんな寒さになってしまうのだろう。
冬という季節は花粉がなく、厚着をしていれば外は歩きやすいし汗もかかない快適な季節だ。しかし、寒さというのは人間の不安を煽る成分があり、夜になると気分が下振れしやすいのが困りポイントだ。</description>
    </item><item>
      <title>日記</title>
      <link>https://blog.himanoa.net/82/</link>
      <pubDate>Sat, 22 Oct 2022 19:58:06 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/82/</guid>
      <description>今日は朝まで会社で飲んでいた。会社のベッドが壊れていたので、始発で家に帰りそのまま寝ていて17時くらいに起きた。
総じてなんもしていない。飯を作ろうとおもったが面倒なので海鮮丼をデリバリーしてもらって食べた。
自作Zshプラグイン・CLIツールの使用状況報告 - 茅の下 を読んだ。
ここの筆者は友人で、数々の自作ツールを作って自分で作業環境を整えている同士だ。
この記事はそんな数々の自作ツールをどういうモチベーションがあって作ったのか、や実際使ってみてどうだったのかというのがまとまっている。
僕も自作したツールを日常生活でかなりの頻度で使っており、その利用状況をまとめてもいいかなとおもった。が、しかし最近はリポジトリすら作らず、$PATHを通した ~/bin に書いてそのまま、みたいなツールも多くそれらを整理してpublicにしていく方が先なのでは？と考えている。
今日はゲームをしないで、のんびり過ごすかゲームをするかコードを書くかの三択で迷っている。こういうやることで迷っている時間が一番無駄なのでなるべくなくしていきたいのだが、行動ポリシーみたいなのが自分の中で定まっていないので減らすことができていない。
ダイエットはかなり進捗がよい。停滞期を完全に脱したっぽい。今週には78kg台にさしかかれそうだ。</description>
    </item><item>
      <title>日記</title>
      <link>https://blog.himanoa.net/81/</link>
      <pubDate>Thu, 20 Oct 2022 00:19:29 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/81/</guid>
      <description>先日Amazonでゴミ箱ホルダーみたいなのを購入したのが届いた。以前まではAmazonのダンボールのゴミ箱を使っていたが、ゴミ袋が取りやすくなったりゴミ袋を付けたりしやすくなっていい感じ。
その他たまってたダンボールを片付けたりしていた。切らしていた雑巾なども補充したので生活をぼちぼちやっていきたい。
今日は久々に昼にマクドナルドを食べた。自分の料理ばっかり食べていると飯に飽きてくる節があるなあと感じたので、月1くらいで出前を頼んで家で食べたいなとおもった。
最近季節の変わり目だからか朝起きるのがかなりきつい。業務に支障が出てきているので、pavrokをまた購入してもいいかもなあと考えている。
明日は家の契約の更新処理と様々な支払いのために外出したいなと考えている</description>
    </item><item>
      <title>日記</title>
      <link>https://blog.himanoa.net/80/</link>
      <pubDate>Tue, 18 Oct 2022 03:02:25 +0900</pubDate>
      
      <guid>https://blog.himanoa.net/80/</guid>
      <description>夜に東京で予定があったので、オフィスに出社して仕事していた。
深夜にやったツイートがなんかすごい伸びてたのでミュートにした。基本的にTweetがたくさんfavられることとかないので、初めてミュートにする機能を使った。
仕事は自作したデータ構造をReactコンポーネントのレンダリングサイクルと接続するためのAPIを書いたり、説明用のドキュメントを書いていたりしていた。
自作したMutableなオブジェクトの変更に対してReactコンポーネントを接続する時に次のようなコードをよく書く。
import {useState, useEffect} from &amp;#39;react&amp;#39; interface Collection&amp;lt;T&amp;gt; = { updateSnapshot(value: T): void getSnapshot(): T subscribe(callback: () =&amp;gt; void): () =&amp;gt; void } const useCollection = &amp;lt;T&amp;gt;(observableCollection: Collection&amp;lt;T&amp;gt;): T = (observableCollection) =&amp;gt; { const [state, updateState] = observableCollection.getSnapshot() useEffect(() =&amp;gt; { return observableCollection.subscribe(() =&amp;gt; { updateState(observableCollection.getSnapshot()) }) }, [observableCollection]) return state } ReactコンポーネントはupdateStateが呼び出される度にuseStateが書かれているコンポーネントを再レンダリングするという特徴を利用して、自前で定義したMutableなCollectionに変更がある度に、useCollectionを呼び出したコンポーネントが再レンダリングさせる。ということを実現している。
これにselectorやmemo化を加えた概念がReact17までのStoreライブラリとReactを繋ぐhooksの実装としてメジャーだったのだが、React18から追加されるConcurrentModeと併用した時に、画面が一瞬だけ前の状態を表示してしまうなどのチラつきが発生してしまう問題を抱えている。
See. https://youtu.be/oPfSC5bQPR8?t=245
この問題を解決するためにReact18から useSyncExternalStore というカスタムフックが提供されていてこれにstoreのメソッドを食わせることでこの問題を解決できる。
職場のコードはReact17を使っているので useSyncExternalStore を使わなくても問題ないし、ReactからこのAPIがexportされていないので使えないが、将来的にReact18に移行する際に実装を変更することなく移行できるようにしたい。
そんな人向けのライブラリとして、 https://www.npmjs.com/package/use-sync-external-store が存在する。
これは古いReactバージョンで useSyncExternalStore を使うためのshimsで、React18が動いている場合は自動でそちらにfallbackしてくれる便利ライブラリだ。</description>
    </item>
  </channel>
</rss>