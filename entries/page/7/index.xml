<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entries - 遺言書</title>
    <link>https://blog.himanoa.net/entries/</link>
    <description>Recent content in Entries on 遺言書</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 06 Feb 2021 07:31:26 +0900</lastBuildDate>
    
        <atom:link href="https://blog.himanoa.net/entries/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SPAにおけるOpen ID Connect認証</title>
      <link>https://blog.himanoa.net/entries/34/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/entries/34/</guid>
      <description>サーバーサイドとクライアントサイド両方とも実装する機運が出てきたのでそれぞれの役割を整理するためにシーケンス図を書いた。 Googleって書いてあるところはOAuthプロバイダーなら何でも置き替えられるはず
間違ってたら教えてくれ
追記: とりあえずシーケンス図が書けたのでAPIサーバーに求められている機構を実装した。curlで試しているのと、SPAのガワが存在していないため一旦セッションに入れたりstateの検証するのは省いた。
const { createHash } = require(&amp;quot;crypto&amp;quot;);const url = require(&amp;quot;url&amp;quot;);const express = require(&amp;quot;express&amp;quot;);const bp = require(&amp;quot;body-parser&amp;quot;);const axios = require(&amp;quot;axios&amp;quot;);const jwt = require(&amp;quot;jwt-simple&amp;quot;);const secret = require(&amp;quot;./secret.json&amp;quot;);const app = express();app.use(bp.json());const salt = &amp;quot;hakatanosalt&amp;quot;;app.get(&amp;quot;/oauth/callback&amp;quot;, (req, res) =&amp;gt; {console.log(JSON.stringify({code: req.query.code,state: req.query.state}));res.send(&amp;quot;ok&amp;quot;);});app.get(&amp;quot;/oauth/google/login&amp;quot;, function(req, res) {const state = createHash(&amp;quot;sha256&amp;quot;).update(`${salt}${Math.random()}${+new Date()}`).digest(&amp;quot;hex&amp;quot;);const params = new url.</description>
    </item><item>
      <title>RustでMarkdown to Htmlを試してみる</title>
      <link>https://blog.himanoa.net/entries/33/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/entries/33/</guid>
      <description>有給を取って、ここ最近新しい事を始められてなかったことを思い出したので前からやりたかったRustに入門をしました。 んで、まぁいつも通りブログシステムでも書いてみるかなぁとか思ってRocket触ってDBまでアクセスしてInsert流す所までは普通にできたので、とりあえず次はMarkdownをパースしてhtmlに変換するやつでも書こうかなと思ったのでやってみることに。
ライブラリを物色してみるとpulldown-cmarkというやつが人気そうなので雑にインストールして使ってみることにしました:smile:
インストール Rustの環境構築は一旦省いて、以下のコマンドでパッケージを切って依存関係にpulldown-cmarkを入れていきます。
$ cargo new --bin pulldown_cmark_playground$ cd pulldown_cmark_playground$ cat &#39;pulldown-cmark = &amp;quot;0.1.2&amp;quot;&#39; &amp;gt;&amp;gt; Cargo.toml$ cargo buildcargo buildした時に依存関係にあるpulldown-cmarkが落ちてきてビルドされます。エコシステムがしっかりしていて完全に便利。文明の息吹を感じろ。
htmlに変換してみる というわけでライブラリを使う準備が整ったのでさっそくMarkdownをhtmlに変換してみる。 GitHubのREADME.mdにはサンプルコードらしき物が書いていないが、ドキュメントの方にはちゃんと書いてあるのでそちらを参照しよう。大体以下のコードになります。
extern crate pulldown_cmark;use pulldown_cmark::{html, Parser};fn main() {let markdown_str = r#&amp;quot;# Hello人間は愚かな生物。[俺のブログ](https://blog.himanoa.net)&amp;quot;#;let parser = Parser::new(markdown_str);let mut html_buf = String::new();html::push_html(&amp;amp;mut html_buf, parser);println!(&amp;quot;{}&amp;quot;, html_buf);}$ cargo run で実行してみると以下の結果が出力されます。
&amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;人間は愚かな生物。&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://blog.himanoa.net&amp;quot;&amp;gt;俺のブログ&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;普通にhtmlに変換されていますね。やったぜ mutableな変数の参照を引数で渡して、渡した引数に結果が代入されるっていうのがすごい気持ち悪いのですが、多分戻り値で受けるとコピーのオーバーヘッドが発生するからこうなってるのでしょう。わからない…Rust詳しい人教えてくれ…。</description>
    </item><item>
      <title>EFFY one of unreasonable &#34;if&#34; をクリアした</title>
      <link>https://blog.himanoa.net/entries/32/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/entries/32/</guid>
      <description>Vertical Strilke Endless Challenge を作ったサークルProject ICKX さん の第一作である所の EFFY one of unreasonable &amp;ldquo;if&amp;rdquo; をNormalでクリアしたのでそれの感想を書く。ネタバレもある。たぶん
どんなゲームかというと、フライトシューティング(エースコンバット的な)で敵をバッタバッタと撃墜していく感じ。主人公機には専用の装備とかわいい戦術A.Iがついており、専用の装備で超起動したりめっちゃ加速できたりする
ストーリー 民間軍事企業のテストパイロットをやっていたと思ったら敵が襲いかかってきたので、振りかかる火の粉を払ってたらいつの間にかに戦争になっていた。上司は無茶なミッションばっか頼んでくるしこれからわたし、どうなっちゃうのー！？みたいな感じ。主人公が男なのでこれからわたし、どうなっちゃうのー！？ではないが。
驚きのフルボイス ゲーム中のセリフがフルボイスになっていて神、難易度が高いというのもあるが、レーダーみたり機銃のレティクルみたりでセリフ追ってプレイしていられないのでフルボイスなのは嬉しい。シナリオの把握がしやすい
頻繁にキャラクターが喋ってるのでテキスト量も膨大な感じがするんだがしっかりボイスが付いててすごいと思った。
あと味方のモブが主人公ワッショイしてくれる演出もすき。オタクは自己肯定観がひくいので
機載AIのエフィーがかわいい 機体の性能が高いところに由来するのか妙に自信家なところとか、被弾しまくると落ち込んだりするところがかわいい。
セリフからドヤ顔が浮かぶ…
「わたしを使って　彼らを斃して」だとか「勝てない筈がないのです」とか、こうプレイヤーを奮起させるセリフをバシバシ言ってくのが僕的にはスコポイントでした。
エースコンバット ACE余裕じゃなんとかならない難易度 まじで難しい。エースコンバットはかなり得意なゲームなんですけどEasyでも死んだ箇所があったくらいには難しかった。Normalはやばいですね。難しいポイント攻略するのにかなり時間がかかった。敵が物量の暴力で攻めてくるのもあるんだけどエースコンバットよりも攻撃をよくするイメージがついた。全部俺が撃墜してやるぜーなんてやると一瞬で蒸発したりする。
攻略のコツとか まずは全部自分でなんとかするという気持ちを殺すことです。敵がおおいのでミサイルいっぱいあっても足りなかったりする。
味方が有能なので味方と一緒に飛ぶ事を心がける事でこの変はなんとかなったりする。あと母艦が出てくるミッションは困ったら母艦の上空をグルグル回ったりしとけば敵が勝手に死ぬ。この変はエースコンバットよりどうやって飛ぶかを考えさせられるゲームだった。</description>
    </item><item>
      <title>Python &#43; Firebase RealtimeDBでDiscordBotを作った感想</title>
      <link>https://blog.himanoa.net/entries/31/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/entries/31/</guid>
      <description>これの話です。
これの裏側はPython3.6 + Firebase RealtimeDB + GAE(Flexible Enviroment)になっています。
今回はRealtime Databsaeを使った感想について書いていきます
そもそもなぜReatimeDBを？ 人間がデプロイしないで自分のサーバーに追加できるDiscordBotを組みたかったので何かしらに永続化する必要がある。 RDBMSで何か遊ぶことには慣れてるので、本当はRDBMSを使いたかったのだが、無料で使える or もしくはコスパがよろしいプランが存在しなかったので、NosqlなFirebase Realtime DBを採用したみたいな経緯でした。
よかった話 安い 日のデータ通信量がわかれば月のデータ通信量もなんとなくわかるのでわかるんですが、安いのは個人のホビーとしてはポイントがたかい。 僕のユースケースだと無料枠に収まりそうなのでよかった
見えるものが動くまでのサイクルがはやい。 テーブル設計しなくても適当にDatabaseに実データが入れられたり、リアルタイム同期してくれるため動くものを作るまでのサイクルはめちゃくちゃ簡略化できる。
しんどかった話 flattenなスキーマ設計 RealtimeDBはスキーマレスだが開発を効率的にやるためにはやはりスキーマはあったほうがいいと思っているのでアプリケーションコード上でやった。 RealtimeDBはあるテーブルのデータを一覧で取得してくるとその子要素も全部取得してしまうため、データが増えてくるとpayloadは巨大化するしコストも増えていくので、flattenに設計していく必要があるのだがそうすると今度は削除や書き込み時に複数のエンドポイントを更新しないといけなくなるため、漏れが発生するとすぐに破綻するのが大変だった。
そもそもFirestoreを選定しなかった理由 まだベータ版だったのと良さげなAPIClientがなかったため今回は敬遠した。が今度試してみたいですね</description>
    </item><item>
      <title>Hearthstoneランク15いった</title>
      <link>https://blog.himanoa.net/entries/30/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.himanoa.net/entries/30/</guid>
      <description>初心者を脱したのでよかったですね。
滑りこめたのでよかった。月末は弱い人がおおいきがする。最高16で16~18をいったり来たりしてたんだがたまたま、奇数パラがメタと噛みあって連勝ボーナス混みで4-1(記憶ちがいあるかも)で15はいった。
今月主に回してたデッキは 奇数パラディン 奇数ローグ ミラクルローグ で途中9連敗を二回したりでマウス投げたりしてたがまぁ自己ベスト更新できてよかったですね、みたいなところ。このランク帯までは、デッキパワーたかいデッキでメタが噛みあってる時間帯にどれだけしゃぶり尽せるかみたいなところなのでデッキパワーつよいデッキを使えるかみたいなのがでかいとおもう。</description>
    </item>
  </channel>
</rss>